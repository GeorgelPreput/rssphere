[tool.poetry]
name = "rssphere"
version = "0.1.0"
description = "Dockerized RSS summarizer with paywall avoidance aspirations"
authors = [
    "Georgel Preput <georgelpreput@mailbox.org>",
]
license = "GPL-3.0-or-later"
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Office/Business :: News/Diary",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: News/Diary",
]
packages = [{ include = "rssphere", from = "src" }]

[tool.poetry.dependencies]
# pandas = "^2.2.0"
pydantic = "^1.10.6"
python-dotenv = "^1.0.1"
python = "^3.12"
loguru = "^0.7.2"
validators = "^0.28.1"
httpx = "^0.27.0"
authlib = "^1.3.0"
mkdocstrings = { extras = ["python"], version = "^0.25.1" }

[tool.poetry.group.dev.dependencies]
black = { version = "^22.6.0", allow-prereleases = true }
bumpver = "^2023.1129"
coverage = "^7.5.0"
ipykernel = "^6.25.0"
ipywidgets = "^7.7.2"
micropython-unix-stubs = "*"
mkdocs-material = "^9.5.23"
mkdocstrings = { extras = ["python"], version = "^0.25.1" }
# pandas-stubs = "^2.2.0.240218"
pre-commit = "^3.5.0"
pylint = "^3.1.0"
pylint-per-file-ignores = "^1.3.2"
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
ruff = "^0.4.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py310", "py311"]
exclude = '''
(
  /(
      \.git
    | \.github
    | \.venv
  )/
)
'''

[tool.bumpver]
current_version = "0.1.0"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message = "bump version {old_version} -> {new_version}"
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    '^version = "{version}"$',
    '^current_version = "{version}"$',
]

[tool.pylint.MASTER]
load-plugins = ["pylint_per_file_ignores"]

[tool.pylint."MESSAGES CONTROL"]
per-file-ignores = ["scratch/:C0114"]

[tool.pyright]
include = ["src", "tests"]
ignore = ["**/.pyenv"]
exclude = ["**/.pyenv"]

[tool.ruff]
lint.select = ["ALL"]
lint.ignore = [
    "ANN101", # Checks that instance method self arguments have type annotations
    "ANN102", # Checks that class method cls arguments have type annotations
    "D107",   # Missing docstring in __init__
    "D203",   # One blank line required before class docstring
    "D213",   # Multi-line docstring summary should start at the second line
    "E501",   # Line too long
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default value in function definition
    "G004",   # Logging statement uses f-string
    "N812",   # Checks for lowercase imports that are aliased to non-lowercase names
    "S101",   # Use of `assert` detected
]
target-version = "py310"

# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]
lint.unfixable = []
exclude = [".venv", "tests"]
builtins = ["dbutils", "dlt", "display"]

[tool.ruff.lint.per-file-ignores]
"scratch/*" = ["D100", "E402", "ERA001", "INP001", "T201"]
".vscode/__builtins__.pyi" = ["D100", "INP001"]
